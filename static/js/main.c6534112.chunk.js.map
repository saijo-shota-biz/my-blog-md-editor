{"version":3,"sources":["components/MdTextarea/index.tsx","components/MdView/index.tsx","utils/CustomMarked.ts","pages/MdEditor/index.tsx","components/Header/index.tsx","components/Footer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MdTextarea","value","setValue","className","placeholder","onChange","MdView","html","dangerouslySetInnerHTML","__html","renderer","Renderer","heading","text","level","date","Date","dateString","getFullYear","getMonth","getDate","datetimeDiv","strong","codespan","code","languages","langFileName","split","lang","fileName","fileNameBlock","renderTable","rows","join","renderCode","map","row","shift","cell","highlightjs","highlightAuto","paragraph","list","body","listitem","listItems","listItem","replace","subItem","match","length","blockquote","quote","table","header","tablerow","content","tablecell","flags","parse","mdString","marked","setOptions","headerIds","pedantic","gfm","breaks","sanitize","silent","MdEditor","useState","md","setMd","event","target","Header","Footer","App","theme","basename","process","path","exact","component","to","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6534112.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype MdTextareaProps = {\r\n  value: string,\r\n  setValue: (event: React.ChangeEvent<HTMLTextAreaElement>) => void\r\n}\r\n\r\nconst MdTextarea: React.FC<MdTextareaProps> = ({ value, setValue }: MdTextareaProps) => {\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        className=\"md-textarea\"\r\n        placeholder=\"input to article\"\r\n        value={value} onChange={setValue}\r\n      ></textarea>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MdTextarea;","import React from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype MdViewProps = {\r\n  html: string\r\n};\r\n\r\nconst MdView: React.FC<MdViewProps> = ({ html }: MdViewProps) => {\r\n  return (\r\n    <div className=\"md-view\" dangerouslySetInnerHTML={{ __html: html }}></div>\r\n  );\r\n}\r\n\r\nexport default MdView;","import marked, { Renderer } from \"marked\";\r\nimport highlightjs from \"highlight.js\";\r\n\r\nconst renderer = new Renderer();\r\n\r\n// # text renderer\r\nrenderer.heading = (text: string, level: number): string => {\r\n\r\n  const date = new Date();\r\n  const dateString = `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日`\r\n  const datetimeDiv = level === 1 ? `<div class=\"datetime\">更新日: ${dateString}</div>` : \"\";\r\n\r\n  return `\r\n    <h${level}>\r\n      <div>${text}</div>\r\n      ${datetimeDiv}\r\n    </h${level}>\r\n    ${ level === 1 ? \"<hr>\" : \"\" }\r\n  `;\r\n}\r\n\r\n// **text** renderer\r\nrenderer.strong = (text: string): string => {\r\n  return `\r\n    <strong>${text}</strong>\r\n  `;\r\n}\r\n\r\n// `text` renderer\r\nrenderer.codespan = (code: string): string => {\r\n  return `\r\n    <code>${code}</code>\r\n  `;\r\n}\r\n\r\n// ```lang\r\n// code block\r\n// ```\r\nrenderer.code = (code: string, languages: string) => {\r\n\r\n  const langFileName = (languages || \"plaintext\").split(\":\");\r\n  const lang = langFileName[0];\r\n  const fileName = langFileName[1] || \"\";\r\n\r\n  const fileNameBlock = fileName ? `<code class=\"filename\">${fileName}</code>` : \"\";\r\n\r\n  if (lang === \"table\") {\r\n    return `\r\n      ${fileNameBlock}\r\n      ${renderTable(code)}\r\n    `;\r\n  } else if (lang === \"comment\") {\r\n    const rows = code.split(\"\\n\").join(\"<br>\");  \r\n    return `\r\n      <div class=\"container\">\r\n        <div class=\"comment ${fileName || \"left\"}\">\r\n          <p>${rows}</p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  } else {\r\n    return `\r\n    ${fileNameBlock}\r\n    ${renderCode(code, lang)}\r\n  `;\r\n  }\r\n}\r\n\r\nconst renderTable = (code: string): string => {\r\n  const rows = code.split(\"\\n\").map(row => row.split(\",\"));\r\n  return `\r\n    <table>\r\n      <thead>\r\n        <tr>${(rows.shift() || []).map(cell => (`<th>${cell}</th>`)).join(\"\")}</tr>\r\n      </thead>\r\n      <tbody>\r\n        ${rows.map(row => (`<tr>${row.map(cell => (`<td>${cell}</td>`)).join(\"\")}</tr>`)).join(\"\")}\r\n      </tbody>\r\n    </table>\r\n  `;\r\n}\r\n\r\nconst renderCode = (code: string, lang: string): string => {\r\n  return `\r\n    <pre class=\"lang-${lang}\">${\r\n      highlightjs.highlightAuto(code, [lang]).value\r\n    }</pre>\r\n  `;\r\n}\r\n\r\n// p\r\nrenderer.paragraph = (text: string): string => {\r\n  return `\r\n    <p>${text}</p>\r\n  `;\r\n}\r\n\r\nrenderer.text = (text: string) => {\r\n  return `\r\n    <span>${text}</span>\r\n  `;\r\n}\r\n\r\n// list\r\nrenderer.list = (body: string): string => {\r\n  return `\r\n    <ul>${body}</ul>\r\n  `;\r\n}\r\n\r\nrenderer.listitem = (text: string): string => {\r\n  const listItems = text.split('<br>');\r\n  const listItem = (listItems.shift() || \"\").replace(/\\n/g, \"\");\r\n  const subItem = (listItem.match(/<[^span]*>.*/) || [\"\"])[0];\r\n  return `\r\n    <li>\r\n      ${listItem.replace(subItem, \"\")}\r\n    </li>\r\n    ${listItems.length === 0 ? \"\" : `<p>${listItems.join(\"<br>\")}</p>`}\r\n    ${subItem}\r\n  `;\r\n}\r\n\r\n// > blockquote\r\nrenderer.blockquote = (quote: string): string => {\r\n  return `\r\n    <blockquote>${quote}</blockquote>\r\n  `;\r\n}\r\n\r\n// table\r\nrenderer.table = (header: string, body: string) => {\r\n  return `\r\n    <table>\r\n      <thead>\r\n        ${header}\r\n      </thead>\r\n      <tbody>\r\n        ${body}\r\n      </tbody>\r\n    </table>\r\n  `;\r\n}\r\n\r\nrenderer.tablerow = (content: string) => {\r\n  return `\r\n    <tr>${content}</tr>\r\n  `;\r\n}\r\n\r\nrenderer.tablecell = (content: string, flags: { header: boolean, align: string | null }): string => {\r\n  return `\r\n    ${ flags.header ? `<th>${content}</th>` : `<td>${content}</td>` }\r\n  `;\r\n}\r\n\r\nconst parse = (mdString: string): string => {\r\n\r\n  marked.setOptions({\r\n    headerIds: false,\r\n    pedantic: false,\r\n    gfm: true,\r\n    breaks: true,\r\n    sanitize: false,\r\n    silent: false,\r\n    renderer: renderer\r\n  });\r\n\r\n  return marked(mdString);\r\n}\r\n\r\nexport default parse;","import React, { useState } from \"react\";\nimport \"./style.scss\";\nimport MdTextarea from \"components/MdTextarea\";\nimport MdView from \"components/MdView\";\nimport parse from \"utils/CustomMarked\";\n\nconst MdEditor: React.FC = () => {\n\n  const [md, setMd] = useState(\"\");\n  const onChangeHandler = (event: React.ChangeEvent<HTMLTextAreaElement>): void => setMd(event.target.value);\n\n  return (\n    <div className=\"md-editor\">\n      <div className=\"md-editor__block\">\n        <MdTextarea value={md} setValue={onChangeHandler}></MdTextarea>\n      </div>\n      <div className=\"md-editor__block\">\n        <MdView html={parse(md)}></MdView>\n      </div>\n    </div>\n  );\n};\n\nexport default MdEditor;\n","import React from \"react\";\nimport \"./style.scss\";\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">My Blog Editor For Markdown</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.scss\";\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer__text\">\n        Copyright © 2020 saijo-shota-biz All Rights Reserved.\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport \"styles/index.scss\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport MdEditor from \"pages/MdEditor\";\nimport Header from \"components/Header\";\nimport Footer from \"components/Footer\";\n\nfunction App() {\n  const [theme] = useState(\"default\");\n\n  return (\n    <div className={`theme-${theme}`}>\n      <div className=\"app\">\n        <BrowserRouter  basename={process.env.PUBLIC_URL}>\n          <Header />\n          <main>\n            <Switch>\n              <Route\n                path=\"/\"\n                exact={true}\n                component={() => <Redirect to=\"/editor\" />}\n              />\n              <Route path=\"/editor\" component={MdEditor} />\n            </Switch>\n          </main>\n          <Footer />\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then((registration) => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It\"s the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}