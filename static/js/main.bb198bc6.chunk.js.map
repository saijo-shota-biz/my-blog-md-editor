{"version":3,"sources":["components/MdTextarea/index.tsx","components/MdView/index.tsx","utils/CustomMarked.ts","components/UserSettingLancher/index.tsx","store/context.ts","pages/MdEditor/index.tsx","components/ExportButton/index.tsx","components/Header/index.tsx","components/Footer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MdTextarea","value","setValue","className","placeholder","onChange","MdView","html","dangerouslySetInnerHTML","__html","CustomMarked","leftIconUrl","rightIconUrl","renderer","parse","mdString","marked","setOptions","headerIds","pedantic","gfm","breaks","sanitize","silent","this","Renderer","heading","text","level","date","Date","dateString","getFullYear","getMonth","getDate","datetimeDiv","strong","codespan","code","languages","langFileName","split","lang","fileName","fileNameBlock","renderTable","rows","join","renderComment","renderCode","map","row","shift","cell","highlightjs","highlightAuto","message","rightOrLeft","paragraph","list","body","listitem","listItems","listItem","replace","subItem","match","length","blockquote","quote","table","header","tablerow","content","tablecell","flags","UserSettingLancher","useState","open","setOpen","context","useContext","UserSettingContext","userSetting","theme","setTheme","setLeftIconUrl","setRightIconUrl","onClick","htmlFor","id","event","target","newUserSetting","setUserSetting","localStorage","setItem","STORAGE_KEY","JSON","stringify","getItem","defaultContext","React","createContext","useUserSetting","us","setUs","useCallback","current","MdEditor","md","setMd","customMarked","ExportButton","filename","setFilename","val","document","getElementsByClassName","innerHTML","href","getElementsByTagName","style","blob","Blob","type","url","URL","createObjectURL","a","createElement","appendChild","download","click","remove","revokeObjectURL","Header","Footer","App","Provider","basename","process","path","exact","component","to","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb198bc6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype MdTextareaProps = {\r\n  value: string,\r\n  setValue: (event: React.ChangeEvent<HTMLTextAreaElement>) => void\r\n}\r\n\r\nconst MdTextarea: React.FC<MdTextareaProps> = ({ value, setValue }: MdTextareaProps) => {\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        className=\"md-textarea\"\r\n        placeholder=\"input markdown text\"\r\n        value={value} onChange={setValue}\r\n      ></textarea>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MdTextarea;","import React from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype MdViewProps = {\r\n  html: string\r\n};\r\n\r\nconst MdView: React.FC<MdViewProps> = ({ html }: MdViewProps) => {\r\n  return (\r\n    <div className=\"md-view\" dangerouslySetInnerHTML={{ __html: html }}></div>\r\n  );\r\n}\r\n\r\nexport default MdView;","import marked, { Renderer } from \"marked\";\r\nimport highlightjs from \"highlight.js\";\r\n\r\nclass CustomMarked {\r\n\r\n  private renderer: Renderer;\r\n\r\n  constructor(leftIconUrl: string, rightIconUrl: string) {\r\n    this.renderer = new Renderer();\r\n\r\n    // # text renderer\r\n    this.renderer.heading = (text: string, level: number): string => {\r\n\r\n      const date = new Date();\r\n      const dateString = `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日`\r\n      const datetimeDiv = level === 1 ? `<div class=\"datetime\">更新日: ${dateString}</div>` : \"\";\r\n\r\n      return `\r\n        <h${level}>\r\n          <div>${text}</div>\r\n          ${datetimeDiv}\r\n        </h${level}>\r\n        ${ level === 1 ? \"<hr>\" : \"\" }\r\n      `;\r\n    }\r\n\r\n    // **text** renderer\r\n    this.renderer.strong = (text: string): string => {\r\n      return `\r\n        <strong>${text}</strong>\r\n      `;\r\n    }\r\n\r\n    // `text` renderer\r\n    this.renderer.codespan = (code: string): string => {\r\n      return `\r\n        <code>${code}</code>\r\n      `;\r\n    }\r\n\r\n    // ```lang\r\n    // code block\r\n    // ```\r\n    this.renderer.code = (code: string, languages: string) => {\r\n\r\n      const langFileName = (languages || \"plaintext\").split(\":\");\r\n      const lang = langFileName[0];\r\n      const fileName = langFileName[1] || \"\";\r\n\r\n      const fileNameBlock = fileName ? `<code class=\"filename\">${fileName}</code>` : \"\";\r\n\r\n      if (lang === \"table\") {\r\n        return `\r\n          ${fileNameBlock}\r\n          ${renderTable(code)}\r\n        `;\r\n      } else if (lang === \"comment\") {\r\n        const rows = code.split(\"\\n\").join(\"<br>\");  \r\n        return `\r\n          ${renderComment(rows, fileName || \"left\")}\r\n        `;\r\n      } else {\r\n        return `\r\n        ${fileNameBlock}\r\n        ${renderCode(code, lang)}\r\n      `;\r\n      }\r\n    }\r\n\r\n    const renderTable = (code: string): string => {\r\n      const rows = code.split(\"\\n\").map(row => row.split(\",\"));\r\n      return `\r\n        <table>\r\n          <thead>\r\n            <tr>${(rows.shift() || []).map(cell => (`<th>${cell}</th>`)).join(\"\")}</tr>\r\n          </thead>\r\n          <tbody>\r\n            ${rows.map(row => (`<tr>${row.map(cell => (`<td>${cell}</td>`)).join(\"\")}</tr>`)).join(\"\")}\r\n          </tbody>\r\n        </table>\r\n      `;\r\n    }\r\n\r\n    const renderCode = (code: string, lang: string = \"left\"): string => {\r\n      return `\r\n        <pre class=\"lang-${lang}\">${\r\n          highlightjs.highlightAuto(code, [lang]).value\r\n        }</pre>\r\n      `;\r\n    }\r\n\r\n    const renderComment = (message: string, rightOrLeft: string) => {\r\n      return `\r\n        <div class=\"container ${rightOrLeft}\">\r\n          <img src=\"${rightOrLeft === \"left\" ? leftIconUrl : rightIconUrl}\">\r\n          <div class=\"comment\">\r\n            <p>${message}</p>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    // p\r\n    this.renderer.paragraph = (text: string): string => {\r\n      return `\r\n        <p>${text}</p>\r\n      `;\r\n    }\r\n\r\n    this.renderer.text = (text: string) => {\r\n      return `\r\n        <span>${text}</span>\r\n      `;\r\n    }\r\n\r\n    // list\r\n    this.renderer.list = (body: string): string => {\r\n      return `\r\n        <ul>${body}</ul>\r\n      `;\r\n    }\r\n\r\n    this.renderer.listitem = (text: string): string => {\r\n      const listItems = text.split('<br>');\r\n      const listItem = (listItems.shift() || \"\").replace(/\\n/g, \"\");\r\n      const subItem = (listItem.match(/<[^span]*>.*/) || [\"\"])[0];\r\n      return `\r\n        <li>\r\n          ${listItem.replace(subItem, \"\")}\r\n        </li>\r\n        ${listItems.length === 0 ? \"\" : `<p>${listItems.join(\"<br>\")}</p>`}\r\n        ${subItem}\r\n      `;\r\n    }\r\n\r\n    // > blockquote\r\n    this.renderer.blockquote = (quote: string): string => {\r\n      return `\r\n        <blockquote>${quote}</blockquote>\r\n      `;\r\n    }\r\n\r\n    // table\r\n    this.renderer.table = (header: string, body: string) => {\r\n      return `\r\n        <table>\r\n          <thead>\r\n            ${header}\r\n          </thead>\r\n          <tbody>\r\n            ${body}\r\n          </tbody>\r\n        </table>\r\n      `;\r\n    }\r\n\r\n    this.renderer.tablerow = (content: string) => {\r\n      return `\r\n        <tr>${content}</tr>\r\n      `;\r\n    }\r\n\r\n    this.renderer.tablecell = (content: string, flags: { header: boolean, align: string | null }): string => {\r\n      return `\r\n        ${ flags.header ? `<th>${content}</th>` : `<td>${content}</td>` }\r\n      `;\r\n    }\r\n  }\r\n\r\n  parse = (mdString: string): string => {\r\n\r\n    marked.setOptions({\r\n      headerIds: false,\r\n      pedantic: false,\r\n      gfm: true,\r\n      breaks: true,\r\n      sanitize: false,\r\n      silent: false,\r\n      renderer: this.renderer\r\n    });\r\n  \r\n    return marked(mdString);\r\n  }\r\n}\r\n\r\nexport default CustomMarked;\r\n","import React, { useState, useContext, ChangeEvent } from \"react\";\r\nimport \"./style.scss\";\r\nimport { UserSettingContext, UserSetting, STORAGE_KEY } from \"store/context\";\r\n\r\nconst UserSettingLancher: React.FC = () => {\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const context = useContext(UserSettingContext);\r\n\r\n  const [theme, setTheme] = useState(context.userSetting.theme);\r\n  const [leftIconUrl, setLeftIconUrl] = useState(context.userSetting.leftIconUrl);\r\n  const [rightIconUrl, setRightIconUrl] = useState(context.userSetting.rightIconUrl);\r\n\r\n  const setting = () => {\r\n    const newUserSetting: UserSetting = { theme, leftIconUrl, rightIconUrl };\r\n    context.setUserSetting(newUserSetting);\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(newUserSetting))\r\n    setOpen(false);\r\n  }\r\n\r\n  const onChangeSelectHandler = (event: ChangeEvent<HTMLSelectElement>) => {\r\n    setTheme(event.target.value);\r\n  }\r\n\r\n  const onChangeLeftIconUrl = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setLeftIconUrl(event.target.value);\r\n  }\r\n\r\n  const onChangeRightIconUrl = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setRightIconUrl(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <span className=\"user-setting\">\r\n      <span className=\"user-setting__activator\" onClick={() => setOpen(true)}>\r\n        <i className=\"fas fa-user-cog\"></i>\r\n      </span>\r\n      { open ?\r\n        (\r\n          <div className=\"user-setting__content\">\r\n            <button className=\"content__close-btn\" onClick={() => setOpen(false)}>close</button>\r\n            <div className=\"content__form\">\r\n              <div className=\"theme-select\">\r\n                <label className=\"theme-select__label\" htmlFor=\"theme-design-select\">theme</label>\r\n                <select className=\"theme-select__input\" id=\"theme-design-select\" value={theme} onChange={onChangeSelectHandler}>\r\n                  <option value=\"cyan\">cyan</option>\r\n                  <option value=\"teal\">teal</option>\r\n                  <option value=\"indigo\">indigo</option>\r\n                  <option value=\"pink\">pink</option>\r\n                  <option value=\"amber\">amber</option>\r\n                  <option value=\"purple\">purple</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"icon-url\">\r\n                <label className=\"icon-url__label\" htmlFor=\"left-icon-url\">icon image url for comment:left</label>\r\n                <input className=\"icon-url__input\" id=\"left-icon-url\" placeholder=\"http://pictogram2.com/p/p0973/i/m.png\" value={leftIconUrl} onChange={onChangeLeftIconUrl} />\r\n              </div>\r\n              <div className=\"icon-url\">\r\n                <label className=\"icon-url__label\" htmlFor=\"right-icon-url\">icon image url for comment:right</label>\r\n                <input className=\"icon-url__input\" id=\"right-icon-url\" placeholder=\"http://pictogram2.com/p/p0823/i/m.png\"  value={rightIconUrl} onChange={onChangeRightIconUrl} />\r\n              </div>\r\n              <button className=\"setting-btn\" onClick={setting}>\r\n                <i className=\"setting-btn__icon fas fa-check\"></i>\r\n                <span className=\"setting-btn__label\">setting</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (<></>)\r\n      }\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default UserSettingLancher;","import React, { useCallback, useState } from \"react\";\r\nimport UserSetting from \"components/UserSettingLancher\";\r\n\r\nexport type UserSetting = {\r\n  theme: string;\r\n  leftIconUrl: string;\r\n  rightIconUrl: string;\r\n}\r\n\r\nexport const STORAGE_KEY = \"my-blog-md-editor\";\r\n\r\nconst userSetting: UserSetting = JSON.parse(localStorage.getItem(STORAGE_KEY) || `{\r\n  \"theme\": \"cyan\",\r\n  \"leftIconUrl\": \"http://pictogram2.com/p/p0973/i/m.png\",\r\n  \"rightIconUrl\": \"http://pictogram2.com/p/p0823/i/m.png\"\r\n}`);\r\n\r\ntype UserSettingContextType = {\r\n  userSetting: UserSetting,\r\n  setUserSetting: (state: UserSetting) => void\r\n}\r\n\r\nexport const defaultContext: UserSettingContextType = {\r\n  userSetting,\r\n  setUserSetting: () => {}\r\n};\r\n\r\nexport const UserSettingContext: React.Context<UserSettingContextType> = React.createContext(defaultContext);\r\n\r\nexport const useUserSetting = (): UserSettingContextType => {\r\n  const [us, setUs] = useState(userSetting);\r\n\r\n  const setUserSetting = useCallback((current: UserSetting): void => {\r\n    setUs(current);\r\n  }, []);\r\n\r\n  return {\r\n    userSetting: us,\r\n    setUserSetting\r\n  }\r\n}","import React, { useState } from \"react\";\nimport \"./style.scss\";\nimport MdTextarea from \"components/MdTextarea\";\nimport MdView from \"components/MdView\";\nimport CustomMarked from \"utils/CustomMarked\";\nimport { useUserSetting } from \"store/context\";\n\nconst MdEditor: React.FC = () => {\n\n  const [md, setMd] = useState(\"\");\n  const context = useUserSetting();\n  const onChangeHandler = (event: React.ChangeEvent<HTMLTextAreaElement>): void => setMd(event.target.value);\n  const customMarked = new CustomMarked(context.userSetting.leftIconUrl, context.userSetting.rightIconUrl);\n\n  return (\n    <div className=\"md-editor\">\n      <div className=\"md-editor__block\">\n        <MdTextarea value={md} setValue={onChangeHandler}></MdTextarea>\n      </div>\n      <div className=\"md-editor__block\">\n        <MdView html={customMarked.parse(md)}></MdView>\n      </div>\n    </div>\n  );\n};\n\nexport default MdEditor;\n","import React, { useContext, useState } from \"react\";\r\nimport \"./style.scss\";\r\nimport { UserSettingContext } from \"store/context\";\r\n\r\nconst ExportButton = () => {\r\n\r\n  const context = useContext(UserSettingContext);\r\n\r\n  const [filename, setFilename] = useState(\"\");\r\n\r\n  const exportHtml = (): void => {\r\n    const body = document.getElementsByClassName(\"md-editor__block\")[1].innerHTML;\r\n    // const style = document.getElementsByTagName(\"style\")[4].outerHTML;\r\n    const href = document.getElementsByTagName(\"link\")[4].href;\r\n    const style = `<link href=\"${href}\" rel=\"stylesheet\">`\r\n\r\n    const content = `\r\n      <!DOCTYPE html>\r\n      <html lang=\"ja\">\r\n        <head>\r\n          <meta charset=\"utf-8\" />\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n          <title>${filename}</title>\r\n          <link href=\"https://use.fontawesome.com/releases/v5.6.1/css/all.css\" rel=\"stylesheet\">\r\n          <link href=\"https://fonts.googleapis.com/earlyaccess/notosansjapanese.css\" rel=\"stylesheet\">\r\n          ${style}\r\n        </head>\r\n        <body>\r\n          <div class=\"theme-${context.userSetting.theme}\">\r\n            ${body}\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `;\r\n    const blob = new Blob([content], { type: \"text/plain\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.download = `${filename || \"index\"}.html`;\r\n    a.href = url;\r\n    a.click();\r\n    a.remove();\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  return (\r\n    <span className=\"export\">\r\n      <input className=\"export__filename\" value={filename} onChange={val => setFilename(val.target.value)} placeholder=\"input file name\" />\r\n      <span className=\"export__btn\" onClick={exportHtml}>\r\n        <i className=\"fas fa-file-download\"></i>\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default ExportButton;","import React from \"react\";\nimport \"./style.scss\";\nimport UserSettingLancher from \"components/UserSettingLancher\";\nimport ExportButton from \"components/ExportButton\";\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">\n        <span>My Blog Editor For Markdown</span>\n        <UserSettingLancher></UserSettingLancher>\n        <ExportButton></ExportButton>\n      </h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.scss\";\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer__text\">\n        Copyright © 2020 saijo-shota-biz All Rights Reserved.\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"styles/index.scss\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport MdEditor from \"pages/MdEditor\";\nimport Header from \"components/Header\";\nimport Footer from \"components/Footer\";\nimport { UserSettingContext, useUserSetting } from \"store/context\";\n\nfunction App() {\n\n  const context = useUserSetting();\n\n  return (\n    <UserSettingContext.Provider value={context}>\n      <div className={`theme-${context.userSetting.theme}`}>\n        <div className=\"app\">\n          <BrowserRouter  basename={process.env.PUBLIC_URL}>\n            <Header />\n            <main>\n              <Switch>\n                <Route\n                  path=\"/\"\n                  exact={true}\n                  component={() => <Redirect to=\"/editor\" />}\n                />\n                <Route path=\"/editor\" component={MdEditor} />\n              </Switch>\n            </main>\n            <Footer />\n          </BrowserRouter>\n        </div>\n      </div>\n    </UserSettingContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then((registration) => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It\"s the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}